@page "/"
@rendermode InteractiveServer
@using Microsoft.Extensions.AI
@using Store.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject ProductService ProductService

<h1>🛍️ TinyShop Chat</h1>

<section>
    <header>💬 Product Expert</header>
    <article>
        <div id="messages">
            @foreach (var message in messages)
            {
                <div class="message @message.Role.ToString().ToLower()">
                    <span>@(message.Role == ChatRole.Assistant ? "🤖" : "👤")</span>
                    <p>@((MarkupString)(message.Text ?? ""))</p>
                </div>
            }
        </div>
        <footer>
            <input placeholder="Ask about our products..." @bind="input" @bind:event="oninput"
                @onkeypress="HandleKeyPress" />
            <button @onclick="Send" disabled="@isProcessing">
                Send
            </button>
        </footer>
    </article>
</section>

@code {
    private List<ChatMessage> messages = new();
    private string? input;
    private bool isProcessing;

    protected override void OnInitialized()
    {
        messages.Add(new ChatMessage(ChatRole.Assistant, "Hello! Ask me about our outdoor products!"));
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isProcessing)
            await Send();
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(input)) return;

        isProcessing = true;
        messages.Add(new ChatMessage(ChatRole.User, input));
        input = "";

        // Use the ProductService's SendChatMessage method instead of directly using IChatClient
        var responseText = await ProductService.SendChatMessage(messages);

        messages.Add(new ChatMessage(ChatRole.Assistant, responseText ?? "Sorry, something went wrong"));
        isProcessing = false;
        StateHasChanged();
    }
}
