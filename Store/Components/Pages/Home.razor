@page "/"
@rendermode InteractiveServer
@using Microsoft.Extensions.AI
@using Store.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject ProductService ProductService
@inject IChatClient ChatClient

<h1>🛍️ TinyShop Chat</h1>

<section>
    <header>💬 Product Expert</header>
    <article>
        <div id="messages">
            @foreach (var message in messages)
            {
                <div class="message @message.Role.ToString().ToLower()">
                    <span>@(message.Role == ChatRole.Assistant ? "🤖" : "👤")</span>
                    <p>@((MarkupString)(message.Text ?? ""))</p>
                </div>
            }
        </div>
        <footer>
            <input placeholder="Ask about our products..." @bind="input" @bind:event="oninput"
                @onkeypress="HandleKeyPress" />
            <button @onclick="Send" disabled="@isProcessing">
                Send
            </button>
        </footer>
    </article>
</section>

@code {
    private List<ChatMessage> messages = new();
    private string? input;
    private bool isProcessing;

    protected override void OnInitialized()
    {
        messages.Add(new ChatMessage(ChatRole.Assistant, "Hello! Ask me about our outdoor products!"));
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isProcessing)
            await Send();
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(input)) return;

        isProcessing = true;
        messages.Add(new ChatMessage(ChatRole.User, input));
        input = "";

        var productJson = await ProductService.GetProductsJson();
        var systemPrompt = @"You are a TinyShop assistant helping customers find outdoor products.
Use emojis and HTML with Bootstrap classes in your responses. Please convert any Markdown to HTML. Include product
images using full URLs like
https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/product1.png
and keep them small. Use media cards where possible.
Products: " + productJson;

        var allMessages = new List<ChatMessage> { new ChatMessage(ChatRole.System, systemPrompt) };
        allMessages.AddRange(messages);
        var response = await ChatClient.GetResponseAsync(allMessages);

        messages.Add(new ChatMessage(ChatRole.Assistant, response?.Message?.Text ?? "Sorry, something went wrong"));
        isProcessing = false;
        StateHasChanged();
    }
}
