@page "/products"
@page "/products"
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

<PageTitle>Products</PageTitle>

<div class="products-container">
    <h1>Products</h1>

    <p>Here are some of our amazing outdoor products that you can purchase.</p>

    @if (products == null)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="products-grid">
            @foreach (var product in products)
            {
                <ProductCard Product="product" ImagePrefix="@imagePrefix" />
            }
        </div>
    }
</div>

@code {
    private List<Product>? products;
    private string imagePrefix = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        imagePrefix = Configuration["ImagePrefix"];
        products = await ProductService.GetProducts();
    }
}
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

<PageTitle>Products</PageTitle>

<div class="products-container">
    <h1>Products</h1>

    <p>Here are some of our amazing outdoor products that you can purchase.</p>

    @if (products == null)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="products-grid">
            @foreach (var product in products)
            {
                <ProductCard Product="product" ImagePrefix="@imagePrefix" />
            }
        </div>
    }
</div>

<style>
    .loading-spinner {
        display: flex;
        justify-content: center;
        padding: 2rem;
    }

    .products-container {
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        padding: 1rem 0;
    }

    .product-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .product-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .product-image {
        aspect-ratio: 1;
        overflow: hidden;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .product-info {
        padding: 1rem;
    }

    .product-name {
        font-size: 1.25rem;
        margin: 0 0 0.5rem 0;
    }

    .product-description {
        color: #666;
        font-size: 0.9rem;
        margin: 0 0 1rem 0;
    }

    .product-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2b5797;
        margin: 0;
    }
</style>

@code {
    private List<Product>? products;
    private string imagePrefix = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        imagePrefix = Configuration["ImagePrefix"];
        products = await ProductService.GetProducts();
    }
}
